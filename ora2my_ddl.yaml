
# todo:
# view

Oracle2MySQL:
    set_nls_date_fmt: |
        alter session set nls_date_format = 'YYYY-MM-DD HH24:MI:SS'

    set_nls_timestamp_fmt: |
        alter session set nls_timestamp_format = 'YYYY-MM-DD HH24:MI:SSXFF'

    set_nls_timestamp_tz_fmt: |
        alter session set nls_timestamp_tz_format = 'YYYY-MM-DD HH24:MI:SSXFF TZR'

    set_session_tz_utc: |
        ALTER SESSION SET TIME_ZONE='UTC'

    create_tmp_def_dt: |
        CREATE OR REPLACE FUNCTION tmp_def_dt(default_value varchar)
        RETURN timestamp
        AS
        ret timestamp;
        BEGIN
            EXECUTE IMMEDIATE 'select ' || default_value || ' from dual' into ret;
            return ret;
        END;

    check_unsupported_type: |
        SELECT c.OWNER ||'.'|| c.TABLE_NAME ||'.'|| c.COLUMN_NAME COLUMN_NAME, c.DATA_TYPE
        FROM all_tab_cols c, all_objects o
        WHERE 1=1
        AND o.owner = c.owner and o.object_name = c.table_name
        AND o.object_type='TABLE'
        and o.owner = :schema
        AND regexp_like(o.object_name, :table_name_pattern)
        and column_id IS NOT NULL
        AND c.DATA_TYPE IN (SELECT type_name FROM all_types WHERE typecode='OBJECT' and owner IN ('SYS',:schema))

    check_unsupported_default_val: |
        SELECT c.OWNER || '.' || c.TABLE_NAME || '.' || c.COLUMN_NAME COLUMN_NAME , c.DATA_TYPE , c.DATA_LENGTH ,c.DATA_DEFAULT
        FROM all_tab_cols c , all_objects o
        WHERE 1=1
        AND o.owner = c.owner and o.object_name = c.table_name
        AND o.object_type='TABLE'
        and o.owner = :schema
        AND regexp_like(o.object_name, :table_name_pattern)
        and column_id IS NOT NULL
        AND (c.data_type IN ('CLOB', 'NCLOB', 'LONG', 'BLOB', 'LONG RAW') OR (c.data_type IN ('NVARCHAR', 'NVARCHAR2', 'VARCHAR2') and c.data_length > 16380))
        AND c.DATA_DEFAULT IS NOT null

    drop_tmp_cols: |
        drop table tmp_cols

    drop_tmp_cons: |
        drop table tmp_cons

    drop_tmp_tab_ddl: |
        drop table tmp_tab_ddl

    create_tmp_cols: |
        CREATE GLOBAL TEMPORARY TABLE tmp_cols (
        owner varchar2(128),
        table_name varchar2(128),
        column_name varchar2(128),
        data_type varchar2(128),
        data_length NUMBER,
        data_precision NUMBER,
        data_scale NUMBER,
        nullable varchar2(1),
        column_id NUMBER,
        DEFAULT_LENGTH NUMBER,
        comments varchar2(4000),
        data_default clob,
        data_default_vc varchar2(4000),
        vc_to_text_threadhold NUMBER,
        special_define varchar2(4000),
        PRIMARY key(owner, table_name,column_name)
        ) ON COMMIT PRESERVE ROWS

    create_tmp_tab_ddl: |
        CREATE GLOBAL TEMPORARY TABLE tmp_tab_ddl (
        owner varchar2(128),
        table_name varchar2(128),
        part NUMBER,
        obj_name varchar2(128),
        tab_ddl clob,
        UNIQUE(owner, table_name, part, obj_name)
        ) ON COMMIT PRESERVE ROWS

    create_tmp_cons: |
        CREATE GLOBAL TEMPORARY TABLE tmp_cons (
        owner varchar2(128),
        table_name varchar2(128),
        constraint_name varchar2(128),
        constraint_type varchar2(1),
        search_condition clob,
        search_condition_vc varchar2(4000),
        index_owner varchar2(128),
        index_name varchar2(128),
        r_owner varchar2(128),
        r_constraint_name varchar2(128),
        delete_rule varchar2(9),
        index_cols varchar2(4000),
        PRIMARY key(owner, table_name,constraint_name)
        )ON COMMIT PRESERVE ROWS

    insert_tmp_cons: |
        INSERT INTO tmp_cons
        WITH
        c1 AS (
        	SELECT /*+ no_expand */ cc.owner,cc.constraint_name, cc.table_name, constraint_type, cc.column_name, tc.DATA_LENGTH, tc.DATA_TYPE,cc.POSITION,
        	sum(tc.data_length) over(PARTITION BY cc.owner, cc.constraint_name) cons_cols_length,
        	count(*) OVER (PARTITION by cc.owner, cc.constraint_name) cons_cols_num
        	FROM ALL_CONS_COLUMNS cc, all_tab_cols tc,ALL_CONSTRAINTS c
        	WHERE tc.owner = cc.owner AND tc.table_name = cc.table_name AND tc.COLUMN_NAME = cc.COLUMN_NAME
        	and cc.owner = c.owner AND cc.TABLE_NAME = c.TABLE_NAME AND cc.CONSTRAINT_NAME = c.CONSTRAINT_NAME
        	AND c.status='ENABLED'
        	AND c.table_name NOT LIKE 'BIN$%' AND c.TABLE_name NOT LIKE 'SYS_EXPORT_SCHEMA%' 
        	AND c.table_name NOT IN ('TMP_CONS', 'TMP_COLS', 'TMP_TAB_DDL')
        	and cc.owner = :schema
        	AND regexp_like(cc.table_name, :table_name_pattern)
        ),
        c2 AS (
        	SELECT owner,constraint_name,table_name,
        	listagg('`'||column_name||'`' ||
        	CASE WHEN constraint_type IN ('P','U','F') AND cons_cols_length > 768 THEN
                CASE
                        WHEN table_name LIKE 'QRTZ%' THEN null
                        WHEN regexp_like(DATA_TYPE,'^CHAR|^VARCHAR|^CLOB') THEN '('|| least(floor(420/cons_cols_num), data_length) ||')'
                        WHEN regexp_like(DATA_TYPE,'^NCHAR|^NVARCHAR|^NCLOB') THEN '('|| least(floor(420/cons_cols_num), data_length/2) ||')'
                END
        	END
        	,',') WITHIN GROUP (ORDER BY position) INDEX_COLS
        	FROM c1
        	GROUP BY owner,constraint_name,table_name
        )
        SELECT c.owner, c.table_name,c.constraint_name, constraint_type,  to_lob(SEARCH_CONDITION), NULL, index_owner, index_name,
        r_owner,r_constraint_name,delete_rule,INDEX_COLS
        FROM all_constraints c, c2
        WHERE c.OWNER = c2.owner AND c.CONSTRAINT_NAME = c2.constraint_name


    delete_tmp_cons: |
        delete FROM tmp_cons WHERE constraint_type='C' AND SEARCH_CONDITION LIKE '%||%'

    update_tmp_cons_search_condition: |
        UPDATE tmp_cons SET search_condition_vc=trim(to_char(search_condition)) WHERE search_condition IS NOT NULL

    insert_tmp_cols: |
        INSERT INTO tmp_cols
        SELECT /*+ rule */ c.OWNER , c.TABLE_NAME , c.COLUMN_NAME , c.DATA_TYPE , c.DATA_LENGTH , c.DATA_PRECISION ,
        c.DATA_SCALE , c.NULLABLE , c.COLUMN_ID , c.DEFAULT_LENGTH , cm.COMMENTS, to_lob(c.DATA_DEFAULT), NULL, NULL, NULL
        FROM all_tab_cols c, all_objects o, all_col_comments cm
        WHERE 1=1
        AND o.object_name NOT LIKE 'BIN$%' AND o.object_name NOT LIKE 'SYS_EXPORT_SCHEMA%'
        AND o.object_name NOT IN ('TMP_CONS', 'TMP_COLS', 'TMP_TAB_DDL')
        AND o.owner = c.owner and o.object_name = c.table_name
        AND o.OWNER = cm.OWNER AND o.OBJECT_NAME = cm.TABLE_NAME AND c.column_name = cm.column_name
        AND o.object_type='TABLE'
        and o.owner = :schema
        AND regexp_like(o.object_name, :table_name_pattern)
        AND c.HIDDEN_COLUMN ='NO'
        and column_id IS NOT NULL

    update_tmp_cols_default: |
        UPDATE tmp_cols SET DATA_DEFAULT_VC =trim(to_char(data_default)) WHERE DATA_DEFAULT IS NOT NULL

    update_tmp_cols_vc_to_text: |
        UPDATE tmp_cols c SET vc_to_text_threadhold = (
        	SELECT
        	CASE
        	/* skip large vc with default value when calc the total length */
        	WHEN sum(CASE WHEN DATA_DEFAULT_VC IS NULL AND DATA_LENGTH >= 1024 THEN 0 ELSE DATA_LENGTH end)/2 	< 16300 	THEN 1024
        	WHEN sum(CASE WHEN DATA_DEFAULT_VC IS NULL AND DATA_LENGTH >= 512 THEN 0 ELSE DATA_LENGTH end)/2 	< 16300 	THEN 512
        	WHEN sum(CASE WHEN DATA_DEFAULT_VC IS NULL AND DATA_LENGTH >= 256 THEN 0 ELSE DATA_LENGTH end)/2 	< 16300 	THEN 256
        	WHEN sum(CASE WHEN DATA_DEFAULT_VC IS NULL AND DATA_LENGTH >= 128 THEN 0 ELSE DATA_LENGTH end)/2 	< 16300 	THEN 128
        	WHEN sum(CASE WHEN DATA_DEFAULT_VC IS NULL AND DATA_LENGTH >= 64 THEN 0 ELSE DATA_LENGTH end)/2 	< 16300 	THEN 64
        	END vc_to_text_threadhold
        	FROM tmp_cols c2
        	WHERE data_type LIKE '%VARCHAR2%' --AND DATA_DEFAULT_VC IS NULL
        	AND c.owner = c2.owner AND c.table_name = c2.table_name
        )
        WHERE EXISTS (SELECT 1
        	FROM tmp_cols c3
        	WHERE data_type LIKE '%VARCHAR2%'  AND DATA_DEFAULT_VC IS NULL
        	AND c.owner = c3.owner AND c.table_name = c3.table_name
        	GROUP BY c3.owner, c3.table_name
        	HAVING sum(DATA_LENGTH)/2 > 16300)

    update_tmp_cols_special_define: |
        UPDATE (
            SELECT special_define,
            CASE
            WHEN c.data_type LIKE 'TIMESTAMP(%)' AND c.nullable = 'N' AND c.data_default_vc IS NULL 		THEN  
                'timestamp('||CASE WHEN data_scale>6 THEN 6 ELSE data_scale end||') NOT NULL DEFAULT CURRENT_TIMESTAMP('||CASE WHEN data_scale>6 THEN 6 ELSE data_scale end||')'
            WHEN c.table_name = 'T_FUND_PAYMENT_INFO' 				and column_name = 'SERIAL_NUM'          THEN  'int'
            END res
            FROM tmp_cols c
        ) SET SPECIAL_DEFINE = res
        WHERE res IS NOT null

    insert_tmp_tab_ddl_1: |
        INSERT INTO tmp_tab_ddl
        SELECT c.owner,c.table_name, 1 PART, NULL,
        chr(10)||'DROP TABLE IF EXISTS ' || '`' || c.TABLE_NAME || '`;' || chr(10) 
        || 'CREATE TABLE `' || c.TABLE_NAME || '` (' 
        || chr(10) || dbms_xmlgen.convert(rtrim(xmlagg(xmlelement(e, chr(9)||'`'||c.column_name || '` ' ||
        CASE
        WHEN c.special_define IS NOT NULL THEN c.special_define
        /* 
         * In 12c:  The max length of varchar2 could be 32768.
         * But the max length of MySQL varchar can only be 16382, So may need to use text which has max length: 64k
         * In mysql 5, data type NVARCHAR will be implitly changed with 'VARCHAR(4) CHARACTER SET utf8'. So use varchar instead. 
         * the dynamical vc-to-text-threadhold: to avoid mysql 16k limit of total length of all varchar columns.
        */
        WHEN    data_type IN ('NVARCHAR', 'NVARCHAR2', 'VARCHAR2', 'VARCHAR') and data_length >=nvl(vc_to_text_threadhold, 4000) AND c.DATA_DEFAULT_VC IS NULL       	THEN  'text'
        WHEN    data_type IN ('NVARCHAR', 'NVARCHAR2')									       			 	THEN  'varchar('|| DATA_LENGTH/2 || ')'
        WHEN    data_type IN ('VARCHAR2', 'VARCHAR')												       	THEN  'varchar('|| DATA_LENGTH || ')'
        WHEN    data_type IN ('UROWID')                                                                   	THEN  'varchar('||data_length||')'
        WHEN    data_type IN ('CHAR') AND data_length >255          		                             	THEN  'varchar('||data_length||')'
        WHEN    data_type IN ('CHAR') AND data_length <=255                                      			THEN  'char('||data_length||')'
        WHEN    data_type IN ('NCHAR') AND data_length >255                                               	THEN  'varchar('||data_length/2||')'
        WHEN    data_type IN ('NCHAR') AND data_length <=255                                              	THEN  'char('||data_length/2||')'
        WHEN    data_type IN ('ROWID') AND data_length >255			                                       	THEN  'varchar('||data_length*2||')'
        WHEN    data_type IN ('ROWID') AND data_length <=255 		                                     	THEN  'char('||data_length*2||')'
        /* https://docs.oracle.com/cd/B19306_01/server.102/b14220/datatype.htm#sthref3810 */
        WHEN    data_type = 'NUMBER' and data_scale > 0 and data_precision is null                        	THEN  'decimal(38,' || data_scale|| ')'
        WHEN    data_type = 'NUMBER' and data_scale > 0 and data_precision is not null                    	THEN  'decimal(' || data_precision || ',' ||data_scale|| ')'
        WHEN    data_type = 'NUMBER' and data_scale = 0 and data_precision is null                        	THEN  'decimal(38)'
        /* tinyint: -128 - 127 */
        WHEN    data_type = 'NUMBER' and data_scale = 0 and data_precision <= 2                           	THEN  'tinyint'
        /* smallint: -32768 - 32767 */
        WHEN    data_type = 'NUMBER' and data_scale = 0 and data_precision <= 4                           	THEN  'smallint'
        /* mediumint: -8388608 - 8388607 */
        WHEN    data_type = 'NUMBER' and data_scale = 0 and data_precision <= 6                           	THEN  'mediumint'
        WHEN    data_type = 'NUMBER' and data_scale = 0 and data_precision < 9                            	THEN  'int'
        WHEN    data_type = 'NUMBER' and data_scale = 0 and data_precision >= 9 and data_precision <19    	THEN  'bigint'
        WHEN    data_type = 'NUMBER' and data_scale = 0 and data_precision >= 19                          	THEN  'decimal(' || data_precision ||')'
        WHEN    data_type = 'NUMBER' and data_scale IS null and data_precision IS null                    	THEN  'decimal(38)'
        /* timestamp: '1970-01-01 00:00:01' UTC to '2038-01-19 03:14:07' UTC */
        /* timestamp: max precision: 6 */
        /* datetime : '1000-01-01 00:00:00' to '9999-12-31 23:59:59' */
        WHEN trim(c.DATA_DEFAULT_VC) IS NOT NULL AND 
            (lower(trim(c.DATA_DEFAULT_VC)) like 'to_timestamp%' OR	
            lower(trim(c.DATA_DEFAULT_VC)) like 'to_date%') AND
            (tmp_def_dt(c.DATA_DEFAULT_VC) <= TO_TIMESTAMP('1970-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss') OR
             tmp_def_dt(c.DATA_DEFAULT_VC) >= TO_TIMESTAMP('2038-01-19 03:14:07', 'yyyy-mm-dd hh24:mi:ss'))	THEN  'datetime('||CASE WHEN data_scale>6 THEN 6 ELSE data_scale end||')'
        WHEN    data_type IN ('DATE', 'TIMESTAMP', 'TIMESTAMP(0)')											THEN  'datetime'
        WHEN    data_type LIKE 'TIMESTAMP(%)'																THEN  'datetime('||CASE WHEN data_scale>6 THEN 6 ELSE data_scale end||')'
        WHEN    data_type LIKE 'TIMESTAMP WITH% TIME ZONE'													THEN  'timestamp'
        WHEN    data_type LIKE 'TIMESTAMP(%) WITH% TIME ZONE'												THEN  'timestamp('||CASE WHEN data_scale>6 THEN 6 ELSE data_scale end||')'
        WHEN    data_type LIKE 'INTERVAL %'              												  	THEN  'varchar(30)'
        WHEN    data_type IN ('CLOB', 'NCLOB', 'LONG')                                                    	THEN  'longtext'
        WHEN    data_type IN ('BLOB', 'LONG RAW')                                                         	THEN  'longblob'
        WHEN    data_type = 'RAW' AND DATA_LENGTH < 256                                                   	THEN  'binary('||data_length||')'
        WHEN    data_type = 'RAW' AND DATA_LENGTH >= 256                                                  	THEN  'varbinary('||data_length||')'
        WHEN    data_type IN ('FLOAT', 'BINARY_FLOAT')                                                     	THEN  'float'
        WHEN    data_type IN ('BINARY_DOUBLE', 'DOUBLE PRECISION')                                        	THEN  'double'
        /* unsupported data types: anydata, RE$NV_LIST, AQ$_AGENT, UNDEFINED, etc. */
        ELSE 'UNSUPPORTED_'||data_type END
        /* nullable */
        ||CASE 
        WHEN c.special_define IS NOT NULL THEN NULL 
        WHEN nullable = 'N' THEN ' NOT NULL '
        ELSE ' NULL '
        END 
        /* default value -- begin */
        ||CASE   
        WHEN c.special_define IS NOT NULL THEN NULL 
        WHEN nullable = 'N' AND lower(c.DATA_DEFAULT_VC) = 'null' 											THEN ''
        WHEN c.data_default IS NULL 																		THEN NULL 
        WHEN lower(trim(c.DATA_DEFAULT_VC)) = 'sys_guid()' THEN NULL
        /* mysql: [1101] [42000]: BLOB, TEXT, GEOMETRY or JSON column 'COLUMN15' can't have a default value */
        WHEN data_type IN ('CLOB', 'NCLOB', 'LONG', 'BLOB', 'LONG RAW') 
            OR (data_type IN ('NVARCHAR', 'NVARCHAR2', 'VARCHAR2') and data_length > 16380) 				THEN NULL 
        WHEN lower(c.DATA_DEFAULT_VC) = 'sysdate' OR lower(c.DATA_DEFAULT_VC) like 'current_timestamp%' 	THEN ' default now('||CASE WHEN data_scale > 6 THEN 6 ELSE data_scale end||')'
        WHEN lower(trim(c.DATA_DEFAULT_VC)) like 'to_timestamp%' 
            OR lower(trim(c.DATA_DEFAULT_VC)) like 'to_date%' 												THEN ' default '''||to_char(tmp_def_dt(c.DATA_DEFAULT_VC), 'yyyy-mm-dd hh24:mi:ss')||''' '
        else ' default '||to_char(c.data_default)
        end  
        /* default value -- end */
        /* column comment. note: The comments can not contain any control char. */
        ||decode(c.comments, NULL,NULL,' comment '''||REGEXP_REPLACE(c.COMMENTS, '[[:cntrl:]]', ' ')||'''')
        || ','||chr(10)) ORDER BY c.COLUMN_ID).extract ('//text()').GetClobVal(),','||chr(10)), 1)
        /* pk */
        ||(SELECT chr(10)|| chr(9) || ',primary key ('|| INDEX_COLS || ')' FROM tmp_cons con WHERE c.OWNER = con.OWNER AND c.TABLE_NAME = con.TABLE_NAME AND con.CONSTRAINT_TYPE = 'P') 
        /* uk */
        ||(SELECT listagg(chr(10)|| chr(9) || ',unique key `'|| con.CONSTRAINT_NAME || '`(' || con.INDEX_COLS || ')') WITHIN GROUP (ORDER BY con.CONSTRAINT_NAME) FROM tmp_cons con WHERE c.OWNER = con.OWNER AND c.TABLE_NAME = con.TABLE_NAME AND con.CONSTRAINT_TYPE = 'U') 
        /* engine and charset */
        ||chr(10)||') engine=innodb' 
        /* table comment*/
        ||decode(tm.COMMENTS,NULL,NULL,' comment='''||tm.COMMENTS||'''') 
        || ';' || chr(10)
        tab_ddl
        FROM tmp_cols c, all_tab_comments tm
        WHERE 1=1
        AND c.owner = tm.owner AND c.table_NAME  = tm.TABLE_NAME
        GROUP BY c.owner,c.table_name,tm.COMMENTS

    insert_tmp_tab_ddl_2: |
        INSERT INTO tmp_tab_ddl
        SELECT c.owner,c.table_name, 2 PART, constraint_name,
        'alter table `'||c.table_name || '` add constraint ' || constraint_name||' check('||REPLACE(replace(search_condition_vc,chr(10),' '),'"','`')||');' || chr(10)
        tab_ddl
        FROM tmp_cons c
        WHERE constraint_type IN ('C')
        AND (c.owner, c.table_name) IN (SELECT owner, table_name FROM tmp_cols)
        AND NOT regexp_like(search_condition_vc, '^.* IS NOT NULL$') /* exclude notnull check */

    insert_tmp_tab_ddl_3: |
        INSERT INTO tmp_tab_ddl
        SELECT i.TABLE_OWNER ,i.TABLE_NAME ,3 part, i.INDEX_NAME ,
        'create '
        ||decode(i.UNIQUENESS,'UNIQUE','UNIQUE ','')
        ||'index `' ||i.INDEX_NAME
        ||'` on `' ||i.TABLE_NAME
        /* set prefix index to avoid error: Specified key was too long; max key length is 3072 bytes */
        ||'`('||listagg('`'||ic.column_name||'`' || CASE
        WHEN c.data_type LIKE 'VARCHAR%' AND ic.column_length > 128 THEN '(128) /* prefix index */'
        WHEN c.data_type LIKE 'NVARCHAR%' AND ic.column_length > 256 THEN '(128) /* prefix index */'
        ELSE '' end,',') WITHIN GROUP (ORDER BY ic.column_position)
        ||');' || chr(10)
        tab_ddl
        FROM all_indexes i, all_ind_columns ic, tmp_cols c
        WHERE (i.table_owner, i.table_name) IN (SELECT owner, table_name FROM tmp_cols)
        AND i.TABLE_OWNER = ic.TABLE_OWNER AND i.TABLE_NAME = ic.TABLE_NAME AND i.INDEX_NAME = ic.INDEX_NAME
        AND c.owner = ic.TABLE_OWNER AND c.table_name = ic.TABLE_NAME AND c.column_name = ic.COLUMN_NAME
        AND i.VISIBILITY ='VISIBLE' AND index_type NOT IN ('FUNCTION-BASED NORMAL')
        AND (i.owner, i.index_name) NOT IN (SELECT index_owner, index_name FROM tmp_cons WHERE INDEX_NAME IS NOT NULL)
        GROUP BY i.TABLE_OWNER ,i.TABLE_NAME, i.INDEX_NAME, i.UNIQUENESS

    select_tab_ddl: |
        SELECT tab_ddl FROM tmp_tab_ddl ORDER BY owner, table_name, part


    select_fk_ddl: |
        WITH
        ref_cons AS (
        	SELECT owner, table_name, constraint_name, r_owner, r_constraint_name, DELETE_RULE
        	FROM tmp_cons WHERE CONSTRAINT_TYPE IN ('R')
        ),
        con_cols AS (
        	SELECT owner,constraint_name, table_name, listagg('`'||column_name||'`',',') WITHIN GROUP (ORDER BY position) INDEX_COLS
        	FROM ALL_CONS_COLUMNS
        	WHERE owner = :schema
        	AND regexp_like(table_name, :table_name_pattern)
        	GROUP BY owner,constraint_name, table_name
        )
        SELECT
        'alter table '|| c.table_name || ' add constraint '|| r1.constraint_name || ' foreign key (' ||
        r1.index_cols || ') references ' || r2.table_name || '(' || r2.index_cols || ')'||
        CASE delete_rule WHEN 'CASCADE' THEN ' ON DELETE CASCADE' ELSE '' END ||';'||chr(10)
        FROM ref_cons c, con_cols r1, con_cols r2
        WHERE c.owner = r1.owner AND c.constraint_name = r1.constraint_name
        AND c.r_owner = r2.owner AND c.r_constraint_name = r2.constraint_name

